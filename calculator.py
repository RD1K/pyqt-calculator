'''
This is the main file of the calculator app and makes sure the UI works properly
and does everything it has to, like connecting button press events to functions,
disabling buttons under certain conditions, and changing the text of the label.
'''

from PyQt5.QtCore import Qt
from PyQt5 import uic
from PyQt5.QtWidgets import QApplication, QMainWindow

import sys
from functools import partial
import simpleMath

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        uic.loadUi("calc.ui", self)    # Loads the UI from the calc.ui file, generated by Qt Designer

        self.setWindowTitle("Calculator")
        self.show()

        # Dictionary containing button names defined in calc.ui and the numbers they represent
        global numberButtons
        numberButtons = {
            self.button1 : "1",
            self.button2 : "2",
            self.button3 : "3",
            self.button4 : "4",
            self.button5 : "5",
            self.button6 : "6",
            self.button7 : "7",
            self.button8 : "8",
            self.button9 : "9",
            self.button0 : "0"
        }

        for button, digit in numberButtons.items():
            '''
            Sets up signals based on the numberButtons dictionary, with button
            names and the digits to be passed onto the numberClicked function
            '''
            button.clicked.connect(partial(self.numberClicked, digit))

        # Similar to numberButtons but for buttons representing operation symbols
        global symbolButtons
        symbolButtons = {
            self.buttonDiv : "÷",
            self.buttonMult : "×",
            self.buttonSub : "−",
            self.buttonAdd : "+"
        }

        '''
        Sets up signals based on the symbolButtons dictionary, with button
        names and the digits to be passed onto the symbolClicked function
        '''
        for button, symbol in symbolButtons.items():
            button.clicked.connect(partial(self.symbolClicked, symbol))

        self.buttonDec.clicked.connect(self.decClicked)
        self.buttonEq.clicked.connect(self.eqClicked)
        self.buttonClear.clicked.connect(self.clearClicked)

        for button in symbolButtons:
            button.setDisabled(True)
        self.buttonDec.setDisabled(True)
        self.buttonEq.setDisabled(True)

        global symbolPressed
        symbolPressed = 0

    # Appends the pressed number to the QLabel
    def numberClicked(self, digit):
        if "=" not in self.label.text():
        # Ensures that the user cannot add numbers after equals has been pressed:
            self.label.setText(self.label.text() + str(digit))
            for button in numberButtons:
                button.setDisabled(False)

            global symbolPressed
            if symbolPressed == 0:
                for button in symbolButtons:
                    button.setDisabled(False)
            else: pass
            labelText = self.label.text()
            if labelText.count(".") < 2:
                self.buttonDec.setDisabled(False)
            else:
                self.buttonDec.setDisabled(True)
            self.buttonEq.setDisabled(False)

    # Appends the pressed symbol to the QLabel
    def symbolClicked(self, symbol):
        # Ensures that multiple symbols cannot be pressed in one expression:
        self.label.setText(self.label.text() + symbol)
        global symbolPressed
        symbolPressed = 1
        for button in symbolButtons:
            button.setDisabled(True)
        self.buttonDec.setDisabled(True)
        self.buttonEq.setDisabled(True)

    def decClicked(self):
        self.label.setText(self.label.text() + ".")
        self.buttonDec.setDisabled(True)

    # Clears text when "C" button is pressed
    def clearClicked(self):
        self.label.setText("")
        for button in numberButtons:
            button.setDisabled(False)
        for button in symbolButtons:
            button.setDisabled(True)
        self.buttonDec.setDisabled(True)
        self.buttonEq.setDisabled(True)
        global symbolPressed
        symbolPressed = 0

    def eqClicked(self):
        labelText = self.label.text()
        if len(labelText) > 0:  # Checks that the label contains something, and only proceeds if so
            maxIndex = (len(labelText) - 1)     # The index value of the last character in the label
            # Checks that the last character isn't a symbol and the equals sign isn't already there:
            self.label.setText(self.label.text() + " = ")   # Adds the equals sign to the label
            labelText = self.label.text()
            simpleMath.detect(labelText)    # Detects the necessary operation executes it, and sets it as the value of variable "result"
            from simpleMath import result   # Imports the variable mentioned above
            self.label.setText(self.label.text() + str(result))    # Adds the result to the end of the label
            for button in numberButtons:
                button.setDisabled(True)
            for button in symbolButtons:
                button.setDisabled(True)
            self.buttonDec.setDisabled(True)
            self.buttonEq.setDisabled(True)


app = QApplication(sys.argv)

w = MainWindow()

app.exec_()
